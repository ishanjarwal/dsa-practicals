

#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class Queue {
    Node* front;
    Node* rear;

public:
    // Constructor to initialize the queue
    Queue() {
        front = nullptr;
        rear = nullptr;
    }

    // Enqueue (insert) an element into the queue
    void enqueue(int value) {
        Node* newNode = new Node(value);
        if (rear == nullptr) {
            front = rear = newNode; // If the queue is empty
            return;
        }
        rear->next = newNode; // Add new node to the end of the queue
        rear = newNode;
    }

    // Dequeue (remove) an element from the queue
    int dequeue() {
        if (front == nullptr) {
            cout << "Queue underflow\n";
            return -1; // Return a sentinel value
        }
        Node* temp = front;
        int dequeuedValue = front->data;
        front = front->next;
        if (front == nullptr) {
            rear = nullptr; // If the queue is empty after dequeue
        }
        delete temp;
        return dequeuedValue;
    }

    // Peek the front element of the queue
    int peek() {
        if (front == nullptr) {
            cout << "Queue is empty\n";
            return -1;
        }
        return front->data;
    }

    // Check if the queue is empty
    bool isEmpty() {
        return front == nullptr;
    }

    // Destructor to free memory
    ~Queue() {
        while (front != nullptr) {
            Node* temp = front;
            front = front->next;
            delete temp;
        }
    }
};

int main() {
    Queue queue;

    queue.enqueue(10);
    queue.enqueue(20);
    queue.enqueue(30);

    cout << "Front element: " << queue.peek() << endl;

    cout << "Dequeued element: " << queue.dequeue() << endl;
    cout << "Front element after dequeue: " << queue.peek() << endl;

    queue.enqueue(40);

    while (!queue.isEmpty()) {
        cout << "Dequeued element: " << queue.dequeue() << endl;
    }

    return 0;
}


