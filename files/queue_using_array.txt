

#include <iostream>
using namespace std;

class Queue {
    int* arr;
    int front, rear, capacity;

public:
    // Constructor to initialize the queue
    Queue(int size) {
        capacity = size;
        arr = new int[capacity];
        front = -1;
        rear = -1;
    }

    // Enqueue (insert) an element into the queue
    void enqueue(int value) {
        if (rear == capacity - 1) {
            cout << "Queue overflow\n";
            return;
        }
        if (front == -1) {
            front = 0;  // If this is the first element being inserted
        }
        arr[++rear] = value;
    }

    // Dequeue (remove) an element from the queue
    int dequeue() {
        if (front == -1 || front > rear) {
            cout << "Queue underflow\n";
            return -1; // Return a sentinel value
        }
        int dequeuedValue = arr[front++];
        return dequeuedValue;
    }

    // Peek the front element of the queue
    int peek() {
        if (front == -1 || front > rear) {
            cout << "Queue is empty\n";
            return -1;
        }
        return arr[front];
    }

    // Check if the queue is empty
    bool isEmpty() {
        return front == -1 || front > rear;
    }

    // Destructor to free memory
    ~Queue() {
        delete[] arr;
    }
};

int main() {
    Queue queue(5); // Queue of size 5

    queue.enqueue(10);
    queue.enqueue(20);
    queue.enqueue(30);

    cout << "Front element: " << queue.peek() << endl;

    cout << "Dequeued element: " << queue.dequeue() << endl;
    cout << "Front element after dequeue: " << queue.peek() << endl;

    queue.enqueue(40);

    while (!queue.isEmpty()) {
        cout << "Dequeued element: " << queue.dequeue() << endl;
    }

    return 0;
}


