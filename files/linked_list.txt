

#include <iostream>
using namespace std;

// Define the structure for a node
struct Node {
    int data;
    Node* next;
};

// Function to add a node at the front of the list
void addAtFront(Node*& head, int data) {
    Node* newNode = new Node();
    newNode->data = data;
    newNode->next = head;
    head = newNode;
}

// Function to add a node at the end of the list
void addAtEnd(Node*& head, int data) {
    Node* newNode = new Node();
    newNode->data = data;
    newNode->next = nullptr;

    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to delete a node with a specific value
void deleteNode(Node*& head, int data) {
    if (head == nullptr) return; // List is empty

    // If the node to delete is the head
    if (head->data == data) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    // Search for the node to delete
    Node* temp = head;
    while (temp->next != nullptr && temp->next->data != data) {
        temp = temp->next;
    }

    // If the data was not found
    if (temp->next == nullptr) {
        cout << "Node with value " << data << " not found.\n";
        return;
    }

    // Delete the node
    Node* nodeToDelete = temp->next;
    temp->next = temp->next->next;
    delete nodeToDelete;
}

// Function to display the linked list
void displayList(Node* head) {
    Node* temp = head;
    if (temp == nullptr) {
        cout << "List is empty.\n";
        return;
    }

    while (temp != nullptr) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "nullptr\n";
}

int main() {
    Node* head = nullptr;  // Initially, the list is empty

    // Add elements to the linked list
    addAtFront(head, 10);
    addAtFront(head, 20);
    addAtEnd(head, 30);
    addAtEnd(head, 40);

    cout << "Linked list after adding elements:\n";
    displayList(head);

    // Delete a node
    deleteNode(head, 20);
    cout << "\nLinked list after deleting 20:\n";
    displayList(head);

    deleteNode(head, 50);  // Trying to delete a non-existent node
    cout << "\nLinked list after trying to delete 50:\n";
    displayList(head);

    return 0;
}
