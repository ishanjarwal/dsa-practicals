

#include <iostream>
using namespace std;

class Stack {
    int* arr;
    int top;
    int capacity;

public:
    // Constructor to initialize the stack
    Stack(int size) {
        capacity = size;
        arr = new int[capacity];
        top = -1;
    }

    // Push element onto the stack
    void push(int value) {
        if (top == capacity - 1) {
            cout << "Stack overflow\n";
            return;
        }
        arr[++top] = value;
    }

    // Pop element from the stack
    int pop() {
        if (top == -1) {
            cout << "Stack underflow\n";
            return -1; // Return a sentinel value
        }
        return arr[top--];
    }

    // Peek the top element of the stack
    int peek() {
        if (top == -1) {
            cout << "Stack is empty\n";
            return -1;
        }
        return arr[top];
    }

    // Check if the stack is empty
    bool isEmpty() {
        return top == -1;
    }

    // Destructor to free memory
    ~Stack() {
        delete[] arr;
    }
};

int main() {
    Stack stack(5); // Stack of size 5

    stack.push(10);
    stack.push(20);
    stack.push(30);

    cout << "Top element: " << stack.peek() << endl;

    cout << "Popped element: " << stack.pop() << endl;
    cout << "Top element after pop: " << stack.peek() << endl;

    stack.push(40);

    while (!stack.isEmpty()) {
        cout << "Popped element: " << stack.pop() << endl;
    }

    return 0;
}
